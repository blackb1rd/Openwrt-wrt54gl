#!/bin/sh /etc/rc.common
#
# Init script for sdhc card mod - mmc, sd, sdhc support
# Version: 2.0.2

START=49
modname="sdhc"
modarg=""
config="/etc/sdcard.conf"
device="/dev/sdcard"

EXTRA_COMMANDS="status test overlay_root"
EXTRA_HELP="\
        status  Show service status and card details
        test    Test write/read speed of card
   overlay_root to overlay root / with /sdcard, add 

[ -x ${initscript} ] && ${initscript} overlay_root > /$(basename $initscript).log

                to the end of /sbin/mount_root. Don't log the output to /tmp or
                /tmp can't be unmounted and the sdcard /tmp be used instead."

#----------------------------------------------------------------------
# Configuration - load config file and calculate gpio mask
#----------------------------------------------------------------------
if [ ! -r ${config} ]; then
        echo "sdcard - ${config} not found"
        exit 1
fi
. ${config}

# set defaults if not configured - di=2, do=4, clk=3, cs=7
let din=${din:-2}
let dout=${dout:-4}
let clk=${clk:-3}
let cs=${cs:-7}

# We can compute the GPIO pin values supplied in the config file
let mask="(1<<$cs)|(1<<$clk)|(1<<$din)|(1<<$dout)"

# Error if gpio values not set.
if [ "$mask" -eq "1" ]; then
        echo "sdcard - Gpio pins not set - update ${config}"
        exit 1
fi

# load the debug module by default, load debug disabled only if existing and debug is off
[ ${dbg:-0} -eq 0 ] && [ -e /lib/modules/$(uname -r)/sdhc.o ] || modname="${modname}d"


#----------------------------------------------------------------------
# Function Definitions
#----------------------------------------------------------------------

# Save state of led's in /proc/diag/led/ as shell variables.
save_led_state() {
        for file in /proc/diag/led/*; do
                local var=`basename ${file}`
                local val=`cat ${file}`
                eval "${var}=${val}"
        done
}

# Restore saved led state. Default unknown led's to state "0".
restore_led_state() {
        for file in /proc/diag/led/*; do
                local var=`basename ${file}`
                eval "echo \"\${$var:-0}\" > ${file}"
        done
}

# Start the sdhc module.
start() {

        # Do nothing if the module is already loaded!
        if [ -d "/proc/sdcard" ]; then
                echo "sdcard - Already started..."
                exit 1;
        fi

        # Set the diag module gpio mask to disable it from using our GPIO pins
        # It buggers up the led state, so we save, then restore it afterwards
        save_led_state
        echo "$mask" > /proc/diag/gpiomask
        restore_led_state

        # Build module arguments from values in config file.
        # Don't provide the dbg module argument if set to 0
        for arg in clk din dout cs major maxsec rahead dbg gpio_input gpio_output gpio_enable gpio_control; do
                [ "${arg}" == "dbg" ] && [ ${dbg:-0} -eq 0 ] && continue
                eval "z=\${${arg}:-z}"
                if [ "$z" != "z" ]; then
                        modarg="${modarg} ${arg}=${z}"
                fi
        done

        # Insert the kernel module passing appropriate arguments
        insmod $modname $modarg
        if [ "$?" -gt "0" ] ; then
                echo "sdcard - Card not present or failed to initialize
Are the gpio's properly configured in '${config}'?"
                echo "0x0000" > /proc/diag/gpiomask
                restore_led_state
                exit 1;
        fi
        echo "sdcard - Card detected and initialized"
        
        # Check and load fs modules
        load_fsmodules ${fsmodules}
        
        # Mount it if requested.        
        if [ "${partition:-z}" != "z" ] && [ "${mountpoint:-z}" != "z" ] ; then 
                [ -d ${mountpoint} ] || mkdir ${mountpoint}
                mount ${device}/part${partition} ${mountpoint}
                if [ "$?" -gt "0" ]; then
                        echo "sdcard - Unable to mount ${device}/part${partition} on ${mountpoint}"
                        exit 1
                fi
                echo "sdcard - ${device}/part${partition} mounted on ${mountpoint}"
        fi
}

stop() {

        # unmount the /scard filesystem if mounted
        grep " ${mountpoint} " /proc/mounts > /dev/null 2>&1
        if [ "$?" -eq "0" ]; then
                umount ${mountpoint}
                if [ "$?" -gt "0" ]; then
                        echo "sdcard - Unable to unmount ${mountpoint}"
                        exit 1;
                fi
        fi

        # Remove the sdhc kernel module if loaded
        if [ -d "/proc/sdcard" ]; then
                rmmod $modname
                if [ "$?" -gt "0" ]; then
                        echo "sdcard - Unable to unload $modname kernel module"
                        exit 1;
                fi
        fi

        # Remove the gpio mask
        save_led_state
        echo "0x0000" > /proc/diag/gpiomask
        restore_led_state

        # Success!
        echo "sdcard - Card unmounted - can be safely removed"
}

load_fsmodules () {
        # ehci-hcd is for USB2, ohci-hcd and uhci-hcd are both for USB1 but only
        # one of them works.  For WRTSL54GS, it's ohci, for WL700gE it's uhci.
        echo "Loading Filesystem Modules '$@'"
        for m in "$@"; do
                [ $(lsmod|grep -c "^$m") -gt 0 ] && \
                  echo "Skip already loaded '$m'" && continue
                echo -n "load '$m' "
                echo $(insmod "$m" 2>&1 && echo "OK" || echo "FAILED")
        done
}

overlay_root() {
        # start sdcard
        ${initscript} start
        
        # check if root already overlayed
        overlays=$(mount|grep -e "^mini_fo:[^ ]\+ on / type mini_fo")
        if [ -n "$overlays" ] ; then
                echo -e "\
There is already a filesystem overlaying root fs: \n$overlays
mini_fo only supports one overlay layer. Will not overlay this filesystem."
                exit 1
        fi
        
        # if mount exists now overlay root with it
        if [ "${mountpoint:-z}" != "z" ] && (mount|grep -q ${mountpoint}) ; then
                . /sbin/firstboot
                fopivot  ${mountpoint} /rom
                mount -o move /rom/${mountpoint} ${mountpoint} 2>&-
                umount /tmp 2>&1 || echo "Problem unmounting tmpfs /tmp."
        fi
}

status() {

        # Determine if already loaded
        if [ -d "/proc/sdcard" ]; then
                echo "sdcard - Started"
                cat /proc/sdcard/status
        else
                echo "sdcard - Stopped"
        fi
}

test() {

        # Ensure kernel module loaded
        if [ ! -d "/proc/sdcard" ]; then
                echo "sdcard - Stopped - unable to run test"
                exit 1
        fi

        # Ensure it is mounted
        grep " ${mountpoint} " /proc/mounts > /dev/null 2>&1
        if [ "$?" -ne "0" ]; then
                echo "sdcard - Card not mounted on ${mountpoint} - unable to run test"
                exit 1
        fi

        # Perform write and read test
        echo "Running write test - 32MB file"
        trap "echo Test aborted; rm -f ${mountpoint}/32MB.bin; exit 1" 2
        time ash -c "dd if=/dev/zero of=${mountpoint}/32MB.bin bs=4k count=8192 > /dev/null 2>&1; sync"
        echo "Running read test - 32MB file"
        time ash -c "dd if=${mountpoint}/32MB.bin of=/dev/null bs=4k > /dev/null 2>&1; sync"
        trap 2
        rm -f ${mountpoint}/32MB.bin
        echo "Divide 32768 by elapsed seconds (real) to get throughput in KB/s"
}
